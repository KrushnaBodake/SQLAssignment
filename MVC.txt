MVC Life Cycle 
  When a browser make a request. request will be handled by the routing component in mvc so routing component have registerroutes() method
  so it will be check that requested URL match with routes collecion. if request is match then that request will be forwarded to the mvc handler.
  mvc handler component will create the object of controller with the help of processrequest() method and request will be forwarded to the controller 
  object, so controller component use that controller object and call the executemethod() then controller get executed.once controller get executed
  request will be forwarded to the action execution. Action execution will execute thw action with the help of IActionInvoker interface that action 
  will generate the view result that view result will be pass to the view engine will used to render the plain html and that plain html will be send back
  to the browser.
Routing -> MVC handle -> Conroller -> ActionExection -> View result -> Viw Engie 
----------------------------------------------------------------------------------------------------------------------------------------------------
Project structure of MVC
  In mvc project have properties folder and it have launchsettingjson file have server configuration to run the project in developement mode.
  in wwwroot  it have external files that required for te project ie css folder,html,bootsrap libraries.next is controller it manage the app
  reuest and response. and render appropriate cshtml page. next folder is view used to set ui logic. next folder is model it manage the application
  data by using ado.net , ef.
  then next folder data folder 
  then next folder is repository folder in that folder we add interface and data access layer class. next folder is service layer again it have
  interface
  and class it used to write business logic.
  next folder is shared folder [1] it has _layoutcshtml view in have common html code which same for all pages. 
  next is viewimportcshtml it contains common namespaces which are same for all cshtml pages.
  next is viewstartcshtml page is used for set the common layout file for views.
  next file is appsettings.json it is use to set the database connection. 
  next file is program.cs file start of the mvc appliation excecution from program.cs file intially it executes as console application. then the 
  main method call to create builder method. create method add configuration of weapplication in the project that console app converts into the 
  webappliction and after that it ready to add sevices in the project . eg when we want to add services like view and controller to the container.
  after that project will get build and generate the app. during http request we have to use added services. 
-----------------------------------------------------------------------------------------------------------------------------------------------------
MVC Core [ DI ]
 It is design pattern to develope WebApplication And WebServices.it have three component Model View And Controller
 Model is manage application data by using ADO.NET, EF, LinQ and objects. View is manage UI logic. Controller is used manage Application
 request and response. means as per user httprequest controller select Appropriate view and send to browser after that when controller get
 user input or data in controller
 then controller send that data to the model class. and through model class is stored in database.it generates sucess responce as  per responce
 controller select View send to browser.
 Controller is class which is inhertited by base class controller.
 Controller have actions its return type is IActionResult and return the view. so view is a helper method which will create the view result object.
 IActionResult represent the response generated by the view.there are different types of responces like View ,Json,File.            
 (To generate View or html responce by use helper method view() which is in ActionResut class.)
- Every request in mvc Application is map with controller and its action.(Home is  Controller/Index/Parameter is action, it return or loads cshtml file)
- Every Action have cshtml page.


IActionResult (interface) present the response generated by the view
Base class is ActionResult
There are different types of Response

View → html response   View()   → ActionResult
Json → generates json response  Json()  → JsonResult
File → generates a file   File()   → FileContentResult

--------------------------------------------------------------------------------------------------------------------------------------------------------
Explain what is routing in MVC ? Which are the segments of routing?
--> 
   Convention-based routing - to define this type of routing, we call MapRoute method and set its unique name,  
   URL pattern and specify some default values.

   Attribute-based routing - to define this type of routing, we specify the Route attribute in the action method of the controller.
    
    public class HomeController: Controller
  {
    [Route("Users/about")]
    publicActionResultGotoAbout()
    {
        return View();
    }
  }
----------------------------------------------------------------------------------------------
Explain HTML helpers & its methods
 @Html.ActionLink("Create New", "Create")  <a href="/~Student/Create"> Create New </a>
------------------------------------------------------------------------------------------------
@Viewdata  
  Viewdata is used to pass data from controller to view
  Viewdata internally uses dictionary to store the data
  Viewdata contains key & value pair
  Key → string 
  Value → object (implicit typecast)
  Viewdata needs null value checking
  Viewdata needs explicit type casting
  Introduced in mvc 2
  Data can be maintain for a single request

       public IActionResult ProductList()
        {
            List<Product> products = new List<Product>()
            {
                new Product{Id=1,Name="mouse",Price=999},
                new Product{Id=2,Name="Pendrive",Price=1299},
                new Product{Id=3,Name="Keyboard",Price=899},
                new Product{Id=4,Name="external hdd",Price=2999}
            };
            ViewData["prodlist"] = products;
            return View();
        }

    @if (ViewData["prodlist"]!=null)
{
     @foreach (Product p in (IEnumerable<Product>)ViewData["prodlist"])
        {
            <tr>
                <td>@p.Id</td>
                <td>@p.Name</td>
                <td>@p.Price</td>
            </tr>
        }
}
       

@Viewbag
  ViewBag is used to pass data from controller to view
  Viewbag uses dynamic property to store data
  We can store any value in the viewbag, it will store in the form of property
  Viewbag does not need null value checking
  Viewbag does not need type casting
  Introduced in mvc 4
  Data can be maintain for a single request

        public IActionResult Create(Book book)
        {
            ViewBag.Name=book.Name;
            return View("Show");
        }

    @{
         ViewData["Title"] = "Show";
     }

    <h1>Show</h1>
    <p>
       <b>Name</b>  @ViewBag.Name
    </p>

@tempdata
  Pass data from controller to view
  TempData uses dictionary to store & maintain the data
  Dictionary is key- value pair
  Key- string
  Value - object (implicit type casting)
  We can keep data for multiple request

 TempData["Message"] = "Welcome to mvc core";
            TempData.Keep("Message");

<h1>@TempData["Message"]</h1>

-----------------------------------------------------------------------------------------------------------------------------------------------------
Validations/ DataAnotations-
     we apply validations to accept proper information from user.
     and validations is for 3 things required, pattern and range.
     we apply validations with the help of attributes
       
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
DI Pattern [ S EMB C EF]                             (Addscopped - Accept multiple request)
 It is Software pattern to develope loosely coupled Application with help of interfaces. Everything is manage by business object.and 
 i uesd constructor to inject the dependency in my project 
 because it provides services throught the class. in dependncy pattern i use EF to configure database to Application.create Repository
 and services layer.
 in repository folder manage Applcation data by using EF.and Repository interface have interface and class. and we inject the object
 of ApplicationDbContext class in Repository class.serivice folder have interface and class. in service class we inject repo in 
 services by using constructor. service layer is used to write business logic.then we inject the services in the contrller.

1) appsettingjson --> Add Database Connection
2) Create Service Layer Folder 
3) Create Repository Layer Folder
4) Create a class in model folder
5) Add Properties, Validations and attributes in model class
6) In applicationdbcontext class (it map with application to manage data)
7) In applicationdbcontext class add Dbset generic type it collection of tables and it writes DB queries implicitly.
8) In Repository folder create interfaces GetAll(), GetById(id), Add(obj), Update(obj), Delete(id).
   it also called as DAL and it has methods Add(),remove(),Savechanges(),ToList()
9) In Repository create class in class Constructor inject applicationdbcontext obj . and implement all intefaces.
10) In service create same interface then create a class and in constuctor inject repo and impement all interfaces.
11) Create a Contrller class and in constructor add sercice layer object or inject.
12) Controller creates a Views.

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
Project Explaination / What is asp.net / what is mvc.
  asp.net core 6 is a server side techonology to develope webApplication 
  mvc core is design pattern to develope webApplication. it decide to manage data in application.
  mvc has components model is manage data by using EF
  views manage by using razer engine. it manage view.
 
  i have started working on ecommerse project. that is related to manage online shopping portal that i created. initially 
  in project have 2 roles 1st is admin 2nd is customer to managing data for customer and admin. admin can perform Crud operation on
  category and product. customer can view product list . view single product and add product in to the cart and order the product.
  and currently i have  manging 2 things in the project. and register ,home page are public view anyone an view. 

                                                            OR

 i have started working on ecommerse project. that is related to manage online shopping portal that i created. initially 
 in project have 2 roles 1st is admin 2nd is customer. admin is for manage category and product of the application. admin can
 perform Crud operation on category and product.
 2nd roll is Customer so user is customer customer can view product list. so user can view singe product. user can add product
 in cart.user can place order agaist product.
 so things we are manage in the project. scope in the project is can add online payment services in the project.can add 
 track order in the system. i can add another module feedback.
 currently i have  manging 2 things one is by admin that is crud operatiom by using customer login we are handling the order process.
 so order process and crud operation only 
 these 2 things we are managing in the project.

 I used ASP.Net Core server side technology and MVC ie design pattern to manage data in Application.
 for data storage i used MySQL database.
---------------------------------------------------------------------------------------------------------------------------------------------------------------
Entity framework- (Database first Approach) ApplicationdbContext class is inherited by base class DataContext. ApplicationdbContext class handle connecting 
                   string means read connection string and manage data. generate queries. we perform all operations on dbset.
                   DbSet-Linq quires converted in to sql and fires in to database.
Answer start [ORM ]

-->EF is ORM(object relational mapping means object(classes,property) relation with table) solution framework. and manage data by using object.it enables
 developer to work with data by using objects without deal with database queries.and EF provides built in class ApplicationdbContext class,ApplicationdbContext 
 map with application to read connection string, manage data and generate queries.(DML and DQL done through ApplicationDbContext).ApplicationdbContext class 
 internally uses DbSet<> which is a generic.DbSet 
 is managing data or storing data in to it. means all the DML operations performed on the DbSet DbSet is collection of tables and DbSet will fire internally in 
 the database.DbSet have common methods like Add() add new record in DbSet , Find() Search record in dbset,Remove() remove data from DbSet, SaveChanges() this
 methods Update the database.
 next entity have DAL class 
 Model Class / Business object /Entity class
 Controller 
 View 
 everything have two way communication. use objet for communication.
 ORM solution makes mapping
     1st level mapping is configuration of Appliation with Database using AplicationdbScontext class
     2nd level mapping is table with the model class ie. BO
     3rd level mapping is column with property.
  automatically mapping is done through entity framework.

Steps
 Create Database
 Set Connection String in appsetting.json
 Configure Connecting string in program.cs
 we add(nuget package manager)packages in project 1.Microsoft.EntityFrameworkcore.SqlServer 
 add class in model folder. we add mapping table with class. using table attribute.add primary key. add namespaces/liabrries system.ComponentModel.Dataannotation and
 system.ComponentModel.Dataannotation.Schema
 next we create DataAcessLayer(DAL) class.
 in ApplicationDbset class add Property datatype is Dbset. add model class namespace/lirary.
 Add Constructor in DAL class create object of ApplicationDbContext Class. and access property. perform crud operations by using EF methods add(),Find(),Remove(),
 SaveChanges().
 Create a controller and add ApplicationDbContext class object & add DAL Class object and namespaces.
 ____________________________________________________________________________________________________________________________________________________________________

RestFull services- Representational state transfer [C M W D I T]
         
         Web service → we can use web service when both are web applications

 --> restfull services provides a certain features that can be consumed by the application for exchange data between diff type of applications (web, mobile),
     Technology(java, .net, react, angular) and Diff. devices (laptop , tab, mobile, smart watch..)
    REST services are mapped with http protocol

    Http uses its methods for communication

    (Read)   GET  -> select the data
    (Create) POST -> insert the data
    (Update) PUT  -> modify / update the data
    (Delete) DELETE -> remove/ delete the data

     we create RESTful service in mvc  with the help of Web api

    .net core framework provides a built in template called web api template , it is used to create a RESTful service.

     (in web api → we will use service, repository ,layered architecture)
     in web API We will use DI pattern

     Note→ web api controllers does not contains any views

     To test the web api application need of testing tools
      Postman
      Swagger

   Steps-
     Create a data folder and add AppliationDbContext class which is inherit by DbContext class.
     then in program.cs file and configure connection string. and add required packages example:-
     add swager configuration services in container. add namespace using Microsoft.OpenApi.Models;
     add models folder , reposiyory and service folder.
     add services and repository services in program.cs file with builder.services.AddScopped<>
-->  Add API Controller read/write. restfull services are match with http methods.
     api/Product/GetAllProducts--> url  
     by using route class we set the url is called attribute based routing. it is applicable for [HttpGet].
     try
            {
                return new ObjectResult(service.GetAllProducts());
            }
            catch (Exception ex)
            {
                return StatusCode(StatusCodes.Status500InternalServerError, ex.Message);
            } 
     we use status code methods to return status.
-->  when data comes in http post body. then we have to read data in the application we require FormBody attributes .
     in appsetting.json file add TrustServerCertificate=True. 


-----------------------------------------------------------------------------------------------------------------------------
statemanagement technique [  ]           (State → page information)
-->  when we navigate from one page to another page data will be lost. as http will not maintain data because http is stateless protocol
     it carries only request and response.
     if application need to maintain user ata then we use statemanageent techniques . im asp.net core there are two types of
     statemanagement technique one is cookies and second is session.
     cookies have two types temperory cookies we store data like OTP, user id and in permanent cookie saves user preferences like last 
     category searched. and cookies is textfile. it can not used to manage secure data.
     
     Second type of technique is session it is user specific. 
     Session will maintain the data on the server. Session data can be maintain using two ways
        Inproc mode  → session object will be maintain at worker process Inside the IIS server Default mode is inproc mode
        Outproc mode → session object will be stored in the database like SQL server database.
        Session → a particular time duration is called session
        Example → user login in at 11:00 am and logout at 11:15 am


        Duration : 15 min → is called one session
        Session tracking:
  ---------------------------------------------------------------------------------------------------------------------------------------------
  add singletone services and AddhttpContextaccers
session tracking(28-02-2023)
 when user make a request against that request appid created and stored in to cookie and session is created against that cookie.
 when response with that response include cookie and appid.

 // configuration for cookie
builder.Services.AddHttpContextAccessor();
builder.Services.AddSingleton<IHttpContextAccessor, HttpContextAccessor>();

       public IActionResult Index(IFormCollection form)
        {
            string email = form["email"];
            //set cookie
            CookieOptions options = new CookieOptions();
            options.Expires = DateTime.Now.AddSeconds(60);
            options.Path = "/";
            //options.Secure = true;
            //options.HttpOnly = true; // cookie can be read using client side script --> javascript / vbscript
            // Response property is used to write to cookie
            _httpContextAccessor.HttpContext.Response.Cookies.Append("email", email, options);

            return RedirectToAction("ReadCookie", "ReadCookieSession");
        }

       public IActionResult ReadCookie()
        {
            if (_httpContextAccessor.HttpContext != null)
            {
                ViewBag.Email = _httpContextAccessor.HttpContext.Request.Cookies["email"];
            }
            return View();
        }

// Configuration of session
builder.Services.AddSession(options =>
{
    options.IdleTimeout= TimeSpan.FromMinutes(5);
    options.Cookie.IsEssential= true;
});
// for session
app.UseSession();

        public IActionResult WorkingWithSession(IFormCollection form)
        {
            string email = form["email"];
            HttpContext.Session.SetString("email", email);
            HttpContext.Session.SetString("roleId", "2");
            return RedirectToAction("ReadSession", "ReadCookieSession");
        }


       public IActionResult ReadSession()
        {
            ViewBag.Email = HttpContext.Session.GetString("email");
            return View();
        }

  ===========================================================================================================================================
    State → page information
    When we navigate from one page to another page, data will be lost. As HTTP will not maintain data because HTTP is a stateless protocol
    only carries the request.
    then use cookie and session.
     For cookies we have to add singleton services in program.cs file.    
     add configuration of cookies and session in program.cs file
 
  During the request & response(round trip to the server) if applications need to maintain any page information or any user’s data, we need
  state management techniques.
  Using state management we can persist the page information.
  In asp.net core there are two types of state management techniques  Client side  → cookies and Server side → session

  Client side  → cookies
    Data will be maintain in the primary memory or secondary storage of user
    2 types 
  Temporary cookie →
    (validating OTP, any user information, like its id, email id, application id)
 Permanent cookie -> will be store in users HDD
    C drive→ user’s id, email id 
    User preferences → category searched,
    cookie is a text file. Stores data in plain text format.
    Cookies can not be used to manage secure data
    If cookies are disabled at browser , so app can not maintain the cookies

  Server side → session
      Session is user specific
      Emailid , userid, username, fullname, role id
        Session will maintain the data on the server.Session data can be maintain using two ways
        Inproc mode  → session object will be maintain at worker process Inside the IIS server Default mode is inproc mode
        Outproc mode → session object will be stored in the database like SQL server database.
        Session → a particular time duration is called session
        Example → user login in at 11:00 am and logout at 11:15 am

        Duration : 15 min → is called one session
        Session tracking:
---------------------------------------------------------------------------------------------------------------------------------------
Filters in MVC (work like a firewall)--(used for tracking or maintain log)
   When we want to execute any logic / code , before & after the execution of action then we will use filters in Controller.
   there are 4 types of fillter in mvc
   AuthorizeFilter Class   → IAuthorize Interface → OnAuthorization()
   i want to excute a logic before and after the excution of action. we use ActionFilter
   ActionFilter Class   →  IActionFilter Interface  → OnActionExcuting()  & OnActionExecuted()
   ResultFilter Class   →  IResultFilter Interface  → OnResultExcuting()  & OnResultExecuted()
   ExceptionFilter Class → IException →  Interface  → OnException()

   Authorization→ OnActionExecuting() → OnResultExecuting() → OnResultExecuted()  → OnActionExecuted()
   Filters are applied using attribute in mvc.
 
  steps 
   create project, create data folder add txtfile template in data folder

-------------------------------------------------------------------------------------------------------------------------------------------
Partial View
      when any perticular view need to be render on multiple pages  we will create partial view. then the partial view must be in the shared folder.
      To invoke partial view there are 2 methods   @Html.Partial() & @Html.RenderPartial()
      ==========================================================================================================================================
      When any particular view or UI that needs to be render on multiple pages, we will create partial view
      for Reusability
      If we want to create a partial view which needs to be used on multiple pages across applications, then that partial view must be in the shared folder .
      Usually partial view name start with _ (underscore)
      Example → _Layout is a partial view
      To invoke partial view there are 2 methods
   ______________________________________________________________________________________________________________________________________________
     @Html.Partial()                                  |        @Html.RenderPartial()
   ___________________________________________________|__________________________________________________________________________________________ 
     This method has returns the html string          |      This method has return type void
                                                      |
     When we want to store response in the variable,  |      Can not change the response, as this method display response on the page directly
     modify it then display on the page, we can use   |
     partial method                                   |
                                                      |
     This method is slow                              |      This method is fast
                                                      |
     We can write @html.Partial() on the page         |      We need to enclose the method in @{ }
______________________________________________________|____________________________________________________________________________________________
steps
  after controller add index view in index view add namespace @model IEnumerable<PartialViewDemo.Models.Employee>
  add view in index as Employeelist
================

@model IEnumerable<PartialViewDemo.Models.Employee>
@{
    ViewData["Title"] = "Index";
}
<h1>Employee List</h1>
@Html.Partial("_EmployeeList",Model)


@{
    Html.RenderPartial("_EmployeeList", Model);
}
-------------------------------------------------------------------------------------------------------------------------------------------
Security


Project-


project structure-
-------------------------------------------------------------------------------------------------------------------------------------------------
Ado.Net-
  App → open a conn with DB → fire select → DB return the data → in app we will read the data → app close the conn with DB

      It is a component of .net framework, it act as a mediary between application & DB to store and manage data. 
     DML operations will be performed on the database directly. For each operation applications open a conn with DB , fires the query
     get the result & application closes the connection with DB explicitly
    command class is responsible for firing quires in to the database.
          Methods of command class
          ExecuteNonQuery() - > use with insert / update / delete
          ExecuteReader() a use with select query
          ExecuteScalar() a use with select + aggregate function
          Paramters.AddWithValue()
          Set the value to each parameter in the query

    ConnectionString is used to establish connection of application with DB

   DataReader
       it is used to read data from the DB, it will read in forward direction only. Connection needs to be kept open while we will read data from the data reader.
 
      1.      Property
      HasRows a check the existence of rows in the data reader
      1.      Method
      Read() à it is used to read records row wise in forward direction
-----------------------------------------------------------------------------------------------
File I/O Serlization  17/01/2023
     using,System.IO
  DriveInfo class is used to get drive info,name and space.	
  Directory class and DirectoryInfo is used to create folder.
  DirectoryInfo class  is a concreate class contains instance methods, multiple operations needs to perform.
  file class and fileInfo is used to create file.
  Filestream class can be used to create file and append to the file. it is used to open file in write or read mode.
  streamwriter class is used to save data in the plain text format.
  StreamReader class is used to read data from the file. 


   
       private void btnCreateFolder_Click(object sender, EventArgs e)
        {
            string path = @"E:\SkillMineDoc";
            try
            {
                if (Directory.Exists(path))
                {
                    MessageBox.Show("Directory is already exists");
                }
                else
                {
                    Directory.CreateDirectory(path);
                    MessageBox.Show("Directory created....");
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }

        private void btnCreateFile_Click(object sender, EventArgs e)
        {
            String path = @"E:\SkillMineDoc\Text.txt";
            try
            {
                if(File.Exists(path))
                {
                    MessageBox.Show("File is Already Exists");
                }
                else
                {
                    File.Create(path);
                    MessageBox.Show("File is Created");
                }
            }
            catch(Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }

        private void btnDeleteFile_Click(object sender, EventArgs e)
        {
            String path = @"E:\SkillMineDoc\Text.txt";
            try
            {
                if(File.Exists(path))
                {
                    File.Delete(path);
                    MessageBox.Show("file has been removed");
                }
                else
                {
                    MessageBox.Show("file Not Found");
                }
            }
            catch(Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace SampleCode.Exceptiom.Threadd.FileSerlizaton
{
    public class Stream
    {
        static void Main(string[] args)
        {
            string path = @"E:\SkillMineDoc\Test1.txt";
            using (FileStream fs = new FileStream(path, FileMode.Open, FileAccess.Read))
            {
                using (StreamReader reader = new StreamReader(fs))
                {
                    string data = reader.ReadToEnd();

                    Console.WriteLine(data);
                }

            }

        }
    }
}

========================================================================================================
24.	What is file serialization
Answer: C# object is converted to stream of bytes, to store or transmit it to memory, file or DB
Types of serialization 
  4 types
1.	Binary
2.	SOAP (simple object access protocol)
3.	XML (extensible markup language)
4.	JSON (javascript object notation)

1.	XML (extensible markup language)
        Data get converted in to the string format / plain text format
        It does not maintain the exact copy of data
        Only public members can be serialized
        Deserialization need explicit type casting of data
        Can be used to exchange data between application
        Firewall not applied on it

XML Write
 Step 1-
          FileStream fs = new FileStream(@"D:\SkillMineDoc\EmployeeXML.xml", FileMode.Create,FileAccess.Write); 
 Step 2-
          Create Object of Class and store data in class object
                Employee emp = new Employee();
                emp.Id = Convert.ToInt32(txtId.Text);
                emp.Name = txtName.Text;

 Step 3-
             XmlSerializer xml=new XmlSerializer(typeof(Employee));  
             xml.Serialize(fs, emp);
             fs.Close();

XML Read
             step 1
                FileStream fs = new FileStream(@"D:\SkillMineDoc\EmployeeXML.xml", FileMode.Open,FileAccess.Read);
              step 2
                Employee emp = new Employee();

               step 3
                XmlSerializer xml = new XmlSerializer(typeof(Employee));
                emp = (Employee)xml.Deserialize(fs);
                fs.Close();

                txtId.Text = emp.Id.ToString();
                



2.	JSON (java script object notation)

Lightweight data exchange format used by all the type of applications
JSON will maintain the exact copy of data
Universe accepted format for data exchange
All members of class using JSON 


           step 1
    FileStream fs = new FileStream(@"D:\SkillMineDoc\EmployeeJSON.json", FileMode.Create, FileAccess.Write);
                // step 2
                Employee emp = new Employee();
                emp.Id = Convert.ToInt32(txtId.Text);
                // step 3
                JsonSerializer.Serialize<Employee>(fs, emp);
                fs.Close();


 // step1 1
                FileStream fs = new FileStream(@"D:\SkillMineDoc\EmployeeJSON.json", FileMode.Open, FileAccess.Read);
                // step 2
                Employee emp = new Employee();
                // step 3
               
                emp = JsonSerializer.Deserialize<Employee>(fs);
                fs.Close();

                txtId.Text = emp.Id.ToString();
                txtName.Text = emp.Name;
                txtSalary.Text = emp.Salary.ToString();



-----------------------------------------------------------------------------
What is routing
    
--------------------------------------------------------------------------------------------
Multithreading (System.Threading)
   Every application has single thread by default to execute a program and that single thread is known as Main thread.
   Every application follows single threded model.
   Threads are executed by the operating system using time-sharing.
   Multiple threads are executed simultaneously. it is process of Threads are lightweight process.
   Thread.Sleep(); it pause thread temporarily for the specified amount of time.
   t.join(); method is used to stops execution of thred until the current tread is terminated or complete its task.
   

----------------------------------------------------------------------------------
Linq (Language integrated query)
  It is used to access data from data sourses such as dataset, Sql Server.
  
    SQL                                                       Linq
 select * from Employee                            var result=From emp in employee                       foreach(Employee emp in result)
                                                              select emp;                                      { CW(emp) }                          


select * from employee where empid==1              var result=From emp in Employee
                                                              Where emp.EmpId==1
                                                              Select emp;

 select * from employee order oy salary desc       var result=From emp in Employee
                                                              order by emp.Salary descending
                                                              Select emp;

select * from employee group by deptid              var result=From emp in Employee
                                                               Group by emp.deptid 
                                                               select emp;

  

------------------------------------------------------------------------------
Ieumrable IQuerable
# IEnumerable Interface
    it is used when we want to iterate collection classes using foreach loop.
    IEnumerable internally uses IEnumarator only to iterate the collection via foreach.and iEnumarator have a GetEnumerator() method;
    fetch data without Fillter.

# IQueryable inherited from IEnumerable interface only,So anthing you can do with a IEnumerable, you can also do with an 
   IQueryable also.
   Fetch the required data after fillteration.
    
    
-----------------------------------------------------
Bootstarp grid view

 Frontend design framework
 It is based on html, css, javascript
 Ready template for typography, button, navigation, images, Layout
 Bootstrap is - mobile first approach
 Twitter bootstrap
 Responsive web development
 Page layout → grid system

   @media only screen and (min-device-width:700px) and (max-device-width:1000px) {
            h1 {
                font-size: 40px;
            }

-----------------------------------------------------------------------------------------------------------

using system.Configuration;
using data.sqlClient;

namsespace Window
{
   public class from4 : fprm
   {
    SqlConnection con;
    SqlCommand cmd;
    SqlDataReader dr;
   public from()
    {
     con=new SqlConnection(Connetingstring["DBname"].Conectingstring);
    }

    public void InsertClick()
        {
         string qry="Insert into Employee values(@name,@salary);
         cmd= new SqlCommad(qry,con);
         cmd.Parametrs.Addwithvalue("@name", emp.id);
         cmd.parametrs.Addwithvaue("@salary", emp.name);
         con.open();
         int result=cmd.Executenonquery();
         if(reult==1)
         {
          Console.WriteLine("Record inserted);
          }

     public void Select()
      {
       try
       {
        string qry="Select * from Employee Where empid=@eid";
        cmd=new SqlCommand(qry,con);
        cmd.parametrs.AddwithValue("@eid",emp.id);
        con.Open();
        dr=cmd.ExceteReader();
        if(dr.Hasrow)
         {
          while(dr.read())
           {
            emp.name=dr["name"].Tostring)
         
    }

----------------------------------------
appsetting.json file


using system.componentmodel.dataanotation;
using sysyem.componentmodel.dataanotation.Schema;
namespace Ecommerse.models
{
   [table("tblProduct")]

  public class Product
 {
   [key]
   [scaffefoldcolumn(false)]
   public int Id{ set;get}

   [required]
   public string? Name{ set;get;}

   [foregine key("catid")]
   [Display(name="catname")]
   public int Cid{set;get;)
 }

}


# ApplicationDbContext class

using Ecommersewebsite.Models;
using Microsoft.Entetiyframeworkcore;
using microsoft.Aspnet.Identity.Entityframecore;

namespace Ecommrese.data
{
  public class ApplicationDbContext : IdentityDbContext
   {
      public DbSet<Product> Product{set;get;}
   }

# Repository Folder

Using Ecommerse.models;

namespace ecommerse.Repository
{
   public interface IProductReposiory
    {
     IEnumberable<Product> GetAllProducts();
     Product GetProductByid(int id);
     int AddProduct(Product prod);
     int UpdateProduct(Product prod);
     int DeleteProduct(int id);
    }
}

using Ecommerse.Models;
using commerse.Data;

namespace Ecomerse.repository
{
  public class ProductRepository : IProductRepository
   {
    private readonly ApplicationDbContext db;
    public ProductRepository(ApplicationDbContext db)
    {
      this.db=db;
    }
   
   public IEnumerable<Product> GetAllProduct()
    {
     return db.Product.ToList();
    }
  public Products GetProductByid(int id)
   {
    
     var prod =db.Product.where(x=>x.id==id).FirstOrDefault();
     return prod;
   }
  public int AddProduct(Product prod)
   {
     int result=0;
     db.Prpduct.Add(prod);
     result=db.SaveChanges();
     return result;   
   }
  public int Delete(id)
    {
      int res=0;
      var prod=db.Product.Where(x=>x.id==id).FirstOrDefault();
      if(prod!=null)
       {
         db.Product.Remove(prod);
         result=db.SaveChange();
       }
      return result;
    }
   public int Update(Product prod)
    {
      int res=0;
      var product=db.Product.Where(x=>x.id==prod.id).FirstOrDefault();
      if(prod!=null)
     {
       product.name=prod.name;
       result= db.SaveChange();    
     }
       return result();
    }


# Service Layer Folder

using Ecommerse.models;

namespace Ecommerse.Service
{
    public interface IProductService
    {
     IEnumerable<Product> GetAllProduct();
     Product GetProductByid(id);
     int AddProduct(Product prod);
     int UpdateProdcut(Product pros);
     int DeleteProduct(int id);
     }
}


using Ecommese.Models;
using Ecomerse.Repository;

namespace Ecommerse.Servise
{
   public class ProductService : IProductService
 {
  private readonly IProductRepository repo;
  public ProductService (IProductRepository repo)
   {
     this.repo=repo;
   }

 public IEnumerable<Product> GetAll()
   {
    return repo.GetAll();
   }
 public Product GetProductById(id)
  {
   return repo.GetProductById();
  }

#Controller

using Ecommerse.Models;
using Ecommerse.Service;
using Microsoft.AspNetCore.Mvc;

namespace Ecommerse.Controllers
{
  public class ProductController : Controller
   {
    private readonly IProductService service;
    public ProductController(IProductService service)
       {
         this.service=service;
       }
    Get: ProductController/Index
    public IActionResult Index()
     {
      var plist= service.GetAllProducts();
      var clist=servics.GetAllCat();
       foreach(Product p in plist)
       {
         foreach(Category c in clist)
           {
             p.catname=c.catname;
           }
       }
      return View(plist);
    }
   
   Get: ProductController/Details/id
   public IActionResult Details(int id)
    {
        foreach(Product p in plist)
        {
           if(p.id==id)
           {
             foreach(Category c in clist) 
              {
                 if(c.cid==p.cid)
                 {
                   Viewdata["Catname"]=c.catname;
                 }
              }
           }
         }
        var Product= service.GetProductBy(id);
       return(Product);
    }
 
  Get: ProductController/Create
  public IActionResult Create()
  {
     var cat=service.GetAllCat();
     ViewBag.Cate=cat;
     return View();
  }
  
  Post: ProductController/Create
  [HttpPost]
  [ValidateAntiForgeryToken]
   public IActionResult Create(Product pro, IFormfile file)
   {
     using(var fs=new FileStream(env.Webrootpath+"\\Images\\"+file.fileName, FileMode.Create, FileAccess.Write)
        {
          file.Copy(fs);
        }
       prod.ImgUrl="~/images/"+file.Filename;
       int result=service.AddProduct(pro);
       if(result==1)
        {
         return ReDirectToAction("Index);
        }
       else
        {
          return view()
        }
   }

   Get: ProductController/Edit/id
    public IActionResult Edit(int id)
     {
       var Product = service.GetProductByid(id);
       var Cate= service.GetAllCat();
      HttpCntext.Session.SetString("Oldimgurl",prod.imgurl);
       ViewBag.Cat=Cate;
       return view(Product);
     }

   Post: ProductController/Edit
   [HttpPost]
   [ValidateAntiForgeryToken]
  
   public IActionResult Edit(Product prod, IFormFile file)
    {
      string oldimgurl =HttpContext.Session.GetString("OldimUrl");
      if(file!=null)
       {
       using(var fs= new FileStream(env.WebRootPath+"\\Images\\"+file.fileName, FileMode.Create, FileAccess.Write)
           {
             sile.Copy(fs);
           }
       prod.Imageurl="~/Images/" + fil.fileName;
       string [] str= oldimgurl.Split("/");
       string str1=(str[str.Length-1]);
        string path = env.WebRootPath + "\\Images\\" + str1;    // img.jpg
       System.IO.File.Delete(path); 
       }
     else
     {
      prod.ImageUrl = oldimageurl;
     }
          int result = service.UpdateProuct(prod);
         
    if(result==1)
     {
           return ReDirectToAction("Index);   
      }
    else
            {
                return View();
            }


































































 